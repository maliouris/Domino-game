
package javaproject;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.NO_OPTION;
import static javax.swing.JOptionPane.PLAIN_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_CANCEL_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.JPanel;

/**
 * This is the graphical user interface of the game.
 * @author Ioannis Maliouris
 * @author Konstantinos Nikopoulos
 */
public class Gui extends javax.swing.JFrame {
    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        locale=Locale.getDefault();
        if(locale.getLanguage().equals("el")){
            message.setText("Επέλεξε το παιχνίδι ντόμινο που θες:");
            hungarianButton.setText("Ουγγρικό Ντόμινο");
            cardinalButton.setText("Όλα 7");
            soloChosenDomino.setText("Επιλεγμένο ντόμινο");
            soloLineLabel.setText("Σειρά ντόμινο");
            soloStartButton.setText("Έναρξη");
            soloHint.setText("ΒΟΗΘΕΙΑ");
            soloBack.setText("Πίσω");
            hungarianStartButton.setText("ΕΝΑΡΞΗ ΝΕΟΥ ΓΥΡΟΥ");
            labelDominoDeck.setText("Σετ Ντόμινο:");
            cardGetDomino.setText("Πάρε ντόμινο");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        soloFrame = new javax.swing.JFrame();
        linePanel = new javax.swing.JPanel();
        queue1 = new javax.swing.JPanel();
        queue2 = new javax.swing.JPanel();
        queue3 = new javax.swing.JPanel();
        queue4 = new javax.swing.JPanel();
        soloHint = new javax.swing.JButton();
        soloDominoLine = new javax.swing.JPanel();
        soloDominoDisplay = new javax.swing.JPanel();
        bigDomino = new javax.swing.JLabel();
        soloChosenDomino = new javax.swing.JLabel();
        line1 = new javax.swing.JButton();
        line2 = new javax.swing.JButton();
        line3 = new javax.swing.JButton();
        line4 = new javax.swing.JButton();
        soloLineLabel = new javax.swing.JLabel();
        soloStartButton = new javax.swing.JButton();
        soloBack = new javax.swing.JLabel();
        soloIcon = new javax.swing.JLabel();
        hungarianFrame = new javax.swing.JFrame();
        labelDominoDeck = new javax.swing.JLabel();
        labelDominoDeck.setVisible(false);
        cardGetDomino = new javax.swing.JButton();
        cardGetDomino.setVisible(false);
        dominoDeck = new javax.swing.JLabel();
        dominoDeck.setVisible(false);
        hungPlayer1 = new javax.swing.JPanel();
        hungPlayer2 = new javax.swing.JPanel();
        hungPlayer3 = new javax.swing.JPanel();
        hungPlayer4 = new javax.swing.JPanel();
        hungarianDominoLine = new javax.swing.JPanel();
        hungarianStartButton = new javax.swing.JButton();
        hungarianBackButton = new javax.swing.JLabel();
        hungBackround = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        soloButton = new javax.swing.JButton();
        hungarianButton = new javax.swing.JButton();
        cardinalButton = new javax.swing.JButton();
        infoHung = new javax.swing.JLabel();
        infoCard = new javax.swing.JLabel();
        infoSolo = new javax.swing.JLabel();
        message = new javax.swing.JLabel();
        whitePanel = new javax.swing.JPanel();
        icon = new javax.swing.JLabel();

        soloFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        soloFrame.setTitle("Solo1");
        soloFrame.setMinimumSize(new java.awt.Dimension(1047, 578));
        soloFrame.setPreferredSize(new java.awt.Dimension(1047, 578));
        soloFrame.setResizable(false);
        soloFrame.setSize(390,362);
        soloFrame.getContentPane().setLayout(null);

        linePanel.setBackground(new java.awt.Color(0,0,0,0));
        linePanel.setMinimumSize(new java.awt.Dimension(195, 275));

        queue1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        queue1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        queue2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        queue2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        queue3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        queue3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        queue4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        queue4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        soloHint.setText("HINT");
        soloHint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        soloHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloHintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout linePanelLayout = new javax.swing.GroupLayout(linePanel);
        linePanel.setLayout(linePanelLayout);
        linePanelLayout.setHorizontalGroup(
            linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(queue1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(queue2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(queue3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(queue4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(linePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(soloHint, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        linePanelLayout.setVerticalGroup(
            linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linePanelLayout.createSequentialGroup()
                .addComponent(queue1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queue2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(queue3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queue4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(soloHint, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        soloFrame.getContentPane().add(linePanel);
        linePanel.setBounds(100, 70, 195, 275);

        soloDominoLine.setBackground(new java.awt.Color(0,0,0,0));
        soloDominoLine.setVerifyInputWhenFocusTarget(false);
        soloFrame.getContentPane().add(soloDominoLine);
        soloDominoLine.setBounds(0, 490, 1050, 50);

        soloDominoDisplay.setBackground(new java.awt.Color(0,0,0,0));

        soloChosenDomino.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        soloChosenDomino.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        soloChosenDomino.setText("The Domino you chose:");

        javax.swing.GroupLayout soloDominoDisplayLayout = new javax.swing.GroupLayout(soloDominoDisplay);
        soloDominoDisplay.setLayout(soloDominoDisplayLayout);
        soloDominoDisplayLayout.setHorizontalGroup(
            soloDominoDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(soloDominoDisplayLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(soloDominoDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bigDomino, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soloChosenDomino, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        soloDominoDisplayLayout.setVerticalGroup(
            soloDominoDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(soloDominoDisplayLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(soloChosenDomino, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bigDomino, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );

        soloFrame.getContentPane().add(soloDominoDisplay);
        soloDominoDisplay.setBounds(680, 60, 291, 244);

        line1.setIcon(new javax.swing.ImageIcon("pictures/hand.png"));
        line1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        line1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                line1ActionPerformed(evt);
            }
        });
        soloFrame.getContentPane().add(line1);
        line1.setBounds(300, 80, 36, 36);

        line2.setIcon(new javax.swing.ImageIcon("pictures/hand.png"));
        line2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        line2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                line2ActionPerformed(evt);
            }
        });
        soloFrame.getContentPane().add(line2);
        line2.setBounds(300, 140, 36, 37);

        line3.setIcon(new javax.swing.ImageIcon("pictures/hand.png"));
        line3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        line3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                line3ActionPerformed(evt);
            }
        });
        soloFrame.getContentPane().add(line3);
        line3.setBounds(300, 190, 36, 39);

        line4.setIcon(new javax.swing.ImageIcon("pictures/hand.png"));
        line4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        line4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                line4ActionPerformed(evt);
            }
        });
        soloFrame.getContentPane().add(line4);
        line4.setBounds(300, 250, 36, 39);

        soloLineLabel.setBackground(new java.awt.Color(255, 255, 255));
        soloLineLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        soloLineLabel.setText("Domino Line:");
        soloFrame.getContentPane().add(soloLineLabel);
        soloLineLabel.setBounds(460, 450, 120, 36);

        soloStartButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        soloStartButton.setText("Start");
        soloStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloStartButtonActionPerformed(evt);
            }
        });
        soloFrame.getContentPane().add(soloStartButton);
        soloStartButton.setBounds(450, 200, 120, 49);

        soloBack.setIcon(new javax.swing.ImageIcon("pictures/backArrow.png"));
        soloBack.setText("back");
        soloBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        soloBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        soloBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                soloBackMouseClicked(evt);
            }
        });
        soloFrame.getContentPane().add(soloBack);
        soloBack.setBounds(30, 20, 70, 33);

        soloIcon.setIcon(new javax.swing.ImageIcon("pictures/soloTable.png"));
        soloFrame.getContentPane().add(soloIcon);
        soloIcon.setBounds(0, 0, 1050, 580);

        hungarianFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        hungarianFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hungarianFrame.setMinimumSize(new java.awt.Dimension(1332, 533));
        hungarianFrame.setName("Hungarian Mode"); // NOI18N
        hungarianFrame.setPreferredSize(new java.awt.Dimension(1332, 533));
        hungarianFrame.setResizable(false);
        hungarianFrame.getContentPane().setLayout(null);

        labelDominoDeck.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelDominoDeck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDominoDeck.setText("Domino Deck:");
        hungarianFrame.getContentPane().add(labelDominoDeck);
        labelDominoDeck.setBounds(100, 400, 110, 30);

        cardGetDomino.setText("get Domino");
        cardGetDomino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardGetDominoActionPerformed(evt);
            }
        });
        hungarianFrame.getContentPane().add(cardGetDomino);
        cardGetDomino.setBounds(860, 360, 100, 23);

        dominoDeck.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dominoDeck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hungarianFrame.getContentPane().add(dominoDeck);
        dominoDeck.setBounds(120, 430, 70, 70);

        hungPlayer1.setBackground(new java.awt.Color(0,0,0,0));
        hungPlayer1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hungPlayer1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));
        hungarianFrame.getContentPane().add(hungPlayer1);
        hungPlayer1.setBounds(360, 420, 608, 70);

        hungPlayer2.setBackground(new java.awt.Color(0,0,0,0));
        hungarianFrame.getContentPane().add(hungPlayer2);
        hungPlayer2.setBounds(353, 11, 608, 56);

        hungPlayer3.setBackground(new java.awt.Color(0,0,0,0));
        hungarianFrame.getContentPane().add(hungPlayer3);
        hungPlayer3.setBounds(1276, 75, 46, 359);

        hungPlayer4.setBackground(new java.awt.Color(0,0,0,0));
        hungarianFrame.getContentPane().add(hungPlayer4);
        hungPlayer4.setBounds(10, 75, 47, 359);

        hungarianDominoLine.setBackground(new java.awt.Color(0,0,0,0));
        hungarianFrame.getContentPane().add(hungarianDominoLine);
        hungarianDominoLine.setBounds(58, 244, 1210, 50);

        hungarianStartButton.setText("START NEW ROUND");
        hungarianStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hungarianStartButtonActionPerformed(evt);
            }
        });
        hungarianFrame.getContentPane().add(hungarianStartButton);
        hungarianStartButton.setBounds(575, 190, 160, 36);

        hungarianBackButton.setIcon(new javax.swing.ImageIcon("pictures/hungBackArrow.png"));
        hungarianBackButton.setText("back");
        hungarianBackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hungarianBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hungarianBackButtonMouseClicked(evt);
            }
        });
        hungarianFrame.getContentPane().add(hungarianBackButton);
        hungarianBackButton.setBounds(20, 20, 70, 30);

        hungBackround.setIcon(new javax.swing.ImageIcon("pictures/hungarianTable.png"));
        hungBackround.setMinimumSize(new java.awt.Dimension(1330, 530));
        hungBackround.setPreferredSize(new java.awt.Dimension(1330, 530));
        hungarianFrame.getContentPane().add(hungBackround);
        hungBackround.setBounds(0, 0, 1330, 530);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Domino Games");
        setMinimumSize(new java.awt.Dimension(430, 381));
        setName("Domino Games"); // NOI18N
        setUndecorated(true);
        setSize(430,381);
        getContentPane().setLayout(null);

        exit.setBackground(new java.awt.Color(0, 0, 0));
        exit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("X");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit);
        exit.setBounds(370, 10, 40, 40);

        buttonPanel.setBackground(new java.awt.Color(0,0,0,0));
        buttonPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        soloButton.setBackground(new java.awt.Color(0, 0, 0));
        soloButton.setForeground(new java.awt.Color(255, 255, 255));
        soloButton.setText("Solo1");
        soloButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloButtonActionPerformed(evt);
            }
        });

        hungarianButton.setBackground(new java.awt.Color(0, 0, 0));
        hungarianButton.setForeground(new java.awt.Color(255, 255, 255));
        hungarianButton.setText("Hungarian Mode");
        hungarianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hungarianButtonActionPerformed(evt);
            }
        });

        cardinalButton.setBackground(new java.awt.Color(0, 0, 0));
        cardinalButton.setForeground(new java.awt.Color(255, 255, 255));
        cardinalButton.setText("Cardinal");
        cardinalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardinalButtonActionPerformed(evt);
            }
        });

        infoHung.setIcon(new ImageIcon("pictures/info.png"));
        infoHung.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoHungMouseClicked(evt);
            }
        });

        infoCard.setIcon(new ImageIcon("pictures/info.png"));
        infoCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoCardMouseClicked(evt);
            }
        });

        infoSolo.setIcon(new ImageIcon("pictures/info.png"));
        infoSolo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoSoloMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(soloButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hungarianButton, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(cardinalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoHung, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(infoSolo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(infoCard, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(soloButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(infoSolo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hungarianButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoHung, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardinalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoCard, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(buttonPanel);
        buttonPanel.setBounds(140, 140, 170, 110);

        message.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        message.setText("Choose the domino game you want to play:");
        getContentPane().add(message);
        message.setBounds(50, 10, 302, 51);

        whitePanel.setBackground(new java.awt.Color(255, 255, 255));
        whitePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        icon.setIcon(new javax.swing.ImageIcon("pictures/domino.jpg"));

        javax.swing.GroupLayout whitePanelLayout = new javax.swing.GroupLayout(whitePanel);
        whitePanel.setLayout(whitePanelLayout);
        whitePanelLayout.setHorizontalGroup(
            whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, whitePanelLayout.createSequentialGroup()
                .addGap(0, 190, Short.MAX_VALUE)
                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        whitePanelLayout.setVerticalGroup(
            whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, whitePanelLayout.createSequentialGroup()
                .addGap(0, 177, Short.MAX_VALUE)
                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(whitePanel);
        whitePanel.setBounds(0, 0, 430, 380);

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
    * Starts a new Hungarian frame for Cardinal game.
    * @param evt 
    */
    private void cardinalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardinalButtonActionPerformed
        cardinalGame=new Cardinal(1);
        startHungarianGame(cardinalGame);
    }//GEN-LAST:event_cardinalButtonActionPerformed
    /**
    * Starts a new Hungarian frame for Hungarian game.
    * @param evt 
    */
    private void hungarianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hungarianButtonActionPerformed
        startHungarianGame(hungarianGame);
    }//GEN-LAST:event_hungarianButtonActionPerformed
    /**
    * Starts a new Solo frame.
    * @param evt 
    */
    private void soloButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soloButtonActionPerformed
        startSoloGame();
    }//GEN-LAST:event_soloButtonActionPerformed
    /**
    * Terminates the whole program.
    * @param evt 
    */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        dispose();
    }//GEN-LAST:event_exitActionPerformed
    /**
    * Gives info for the Solo game.
    * @param evt 
    */
    private void infoSoloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoSoloMouseClicked
        if(locale.getLanguage().equals("el")){
           JOptionPane.showMessageDialog(this,"Το παιχνίδι αυτό αποτελείται από έναν παίκτη."
                   +"\nΣτο solo1 το σετ από τα ντόμινο αφού ανακατευχθεί,"
                   + "\nχωρίζεται σε 4 γραμμές. Ο Παίκτης μπορεί να δει"
                   + "\nόλα τα ντόμινο αλλά μπορεί να χρησιμοποιήσει"
                   + "\nμόνο τα τελευταία από κάθε γραμμή. Αν κανένα ντόμινο"
                   + "\nδεν μπορεί να μπει στην σειρά ντόμινο τότε το "
                   + "\nπαιχνίδι τελειώνει και ο Παίκτης χάνει. Νικάει"
                   + "\nμόνο όταν όλες οι γραμμές είναι άδειες και δεν"
                   + "\nυπάρχει ντόμινο που μπορεί να τοποθετεί στην σειρά.");
        }
        else{
            JOptionPane.showMessageDialog(this,"Solo1 is a domino game which is playable by one player. In solo1 the set of \n" +
            "dominos after being suffled it is divided in 4 lines. Player can see every\n" +
            "domino but he can use only the last of each of the 4 lines. If none of these\n" +
            "dominos fit on the domino line then the game is over and the player loses. He\n" +
            "wins only when all lines are empty and no domino is left to be played.");
        }
    }//GEN-LAST:event_infoSoloMouseClicked
    /**
    * Gives info for the Hungarian game.
    * @param evt 
    */
    private void infoHungMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoHungMouseClicked
        if(locale.getCountry().equals("GR")){
            JOptionPane.showMessageDialog(this,"Το ουγγρικό ντόμινο παίζεται από 2 έως 4 παίκτες. Τα ντόμινο\n"
                    + "αφού ανακατευχθούν δίνονται σε κάθε πάικτη.Ο παίκτης με το\n"
                    + "μεγαλύτερο διπλό ντόμινο ξεκινάει να παίζει. Σταματάει να\n"
                    + "παίζει όταν δεν μπορεί να τοποθετήσει άλλα ντόμινο στην\n"
                    + "σειρά. Ο επόμενος παίκτης είναι ο διπλανός του. Όταν ένας\n"
                    + "παίκτης έχει μείνει χωρίς ντόμινο στο χέρι, ο γύρος \n"
                    + "σταματάει και παίρνει τόσους πόντους όσους έχει κάθε παίκτης\n"
                    + "στα χέρια του. Αυτό σημαίνει ότι παίρνει το άθροισμα από \n"
                    + "κάθε αριθμό που οι άλλοι παίκτες έχουν στα ντόμινό τους. \n"
                    + "Επιπρόσθετα αν κανένας δεν μπορεί να βάλει κάποιο ντόμινο\n"
                    + "στην σειρά τότε ο γύρος σταματάει και ο παίκτης με τους\n"
                    + "λιγότερους πόντους στα χέρια του νικάει τον γύρο και παίρνει\n"
                    + "όσους πόντους έχουν οι άλλοι παίκτες συν τους δικούς του.\n"
                    + "Το παιχνίδι σταματάει όταν κάποιος παίκτης φτάσεις τους 100\n"
                    + "πόντους");
        }
        else{
            JOptionPane.showMessageDialog(this,"Hungarian game is a game played by dominos. It consists of 2 to 4 players.\n" +
            " Shuffled dominos are handed out to players. The player with the biggest\n" +
            "double domino starts the round. He stops playing when he cant put other \n" +
            "dominos in the domino line. Then the player next to him has the turn to play.\n" +
            "When one player is being left without dominos the round stops and he gains\n" +
            "as points as every other player has in his hands. This means that he gains\n" +
            "the sum of every number the other players have in their dominos. In addition\n" +
            "if no one has any domino tile to fit the round stops and the player with the \n" +
            "least points on his hand wins the round and gains every point that the other \n" +
            "players have plus his own points. The game stops when one player reaches 100\n" +
            "points.");
        }
    }//GEN-LAST:event_infoHungMouseClicked
    /**
    * Gives info for the Cardinal game.
    * @param evt 
    */
    private void infoCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoCardMouseClicked
        // TODO add your handling code here:
        if(locale.getCountry().equals("GR")){
            JOptionPane.showMessageDialog(this,"Το παιχνίδι Όλα 7 παίζεται από 2 έως 4 παίκτες. Τα ντόμινο\n"
                    + "αφού ανακατευχθούν δίνονται σε κάθε πάικτη.Ο παίκτης με το\n"
                    + "μεγαλύτερο διπλό ντόμινο ξεκινάει να παίζει. Σταματάει να\n"
                    + "παίζει όταν δεν μπορεί να τοποθετήσει άλλα ντόμινο στην\n"
                    + "σειρά. Για να τοποθετήσει ένα ντόμινο στη σειρά πρέπει το \n"
                    + "άθροισμα από τις δύο πλευρές των ντόμινο να είναι 7. Υπάρχουν\n"
                    + "ντόμινο μπαλαντέρ που μπορούν να τοποθετηθούν παντού. Μπαλαντέρ\n"
                    + "θεωρούνται τα ντόμινο που το άθροισμα των 2 πλευρών τους είναι\n"
                    + "ίσο με το 7 ή με το 0.Ο επόμενος παίκτης είναι ο διπλανός του. \n"
                    + "Ο παίκτης μπορεί να πάρει ένα ντόμινο από το σετ όσο ακόμα μπορεί\n"
                    + "να παίξει κάποιο ντόμινο αλλιώς τραβάει ντόμινο μέχρι να μπορεί\n"
                    + "να παίξει. Όταν έναςπαίκτης έχει μείνει χωρίς ντόμινο στο χέρι, ο γύρος \n"
                    + "σταματάει και παίρνει τόσους πόντους όσους έχει κάθε παίκτης\n"
                    + "στα χέρια του. Αυτό σημαίνει ότι παίρνει το άθροισμα από \n"
                    + "κάθε αριθμό που οι άλλοι παίκτες έχουν στα ντόμινό τους. \n"
                    + "Επιπρόσθετα αν κανένας δεν μπορεί να βάλει κάποιο ντόμινο\n"
                    + "στην σειρά τότε ο γύρος σταματάει και ο παίκτης με τους\n"
                    + "λιγότερους πόντους στα χέρια του νικάει τον γύρο και παίρνει\n"
                    + "όσους πόντους έχουν οι άλλοι παίκτες συν τους δικούς του.\n"
                    + "Το παιχνίδι σταματάει όταν κάποιος παίκτης φτάσεις τους 100\n"
                    + "πόντους");
        }
        else{
            JOptionPane.showMessageDialog(this,"Cardinal game is a game played by dominos. It consists of 2 to 4 players.\n" +
            "Shuffled dominos are handed out to players. The player with the biggest\n" +
            "double domino starts the round. He stops playing when he cant put other \n" +
            "dominos in the domino line. In order to put a domino in the domino line the\n" +
            "sum of the 2 sides of the dominos must be 7. There are cardinal dominos that \n" +
            "can be put everywhere. Cardinal dominos are the dominos which the sum of \n" +
            "their sides is 7 or 0.Then the player next to him has the turn to play. A \n" +
            "player can take one domino from the deck when he can still play, otherwise when he cant\n" +
            "he takes dominos from the deck until he can play .When one player is being left \n" +
            "without dominos the round stops and he gains as points as every other player\n" +
            "has in his hands. This means that he gains the sum of every number the other\n" +
            "players have in their dominos. In addition if no one has any domino tile to \n" +
            "fit the round stops and the player with the least points on his hand wins the \n" +
            "round and gains every point that the other players have plus his own points. \n" +
            "The game stops when one player reaches 100 points.");
        }
    }//GEN-LAST:event_infoCardMouseClicked
    /**
    * After being pressed, it starts the Solo game.
    * @param evt 
    */
    private void soloStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soloStartButtonActionPerformed
        // TODO add your handling code here:
        soloGame.setRandomLines();
        soloHint.setVisible(true);
        line1.setVisible(true);
        line2.setVisible(true);
        line3.setVisible(true);
        line4.setVisible(true);
        updateSoloFrame();
        soloStartButton.setVisible(false);
        soloFrame.revalidate();
        soloFrame.repaint();
    }//GEN-LAST:event_soloStartButtonActionPerformed
    /**
    * Selects a domino from the 4th line.
    * @param evt 
    */
    private void line4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_line4ActionPerformed
        lineActionPerformed(4);
    }//GEN-LAST:event_line4ActionPerformed
    /**
    * Selects a domino from the 3rd line.
    * @param evt 
    */
    private void line3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_line3ActionPerformed
        lineActionPerformed(3);
    }//GEN-LAST:event_line3ActionPerformed
    /**
    * Selects a domino from the 2nd line.
    * @param evt 
    */
    private void line2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_line2ActionPerformed
        lineActionPerformed(2);
    }//GEN-LAST:event_line2ActionPerformed
    /**
    * Selects a domino from the 1st line.
    * @param evt 
    */
    private void line1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_line1ActionPerformed
        lineActionPerformed(1);
    }//GEN-LAST:event_line1ActionPerformed
    /**
    * Makes red the dominos that can be played.
    * @param evt 
    */
    private void soloHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soloHintActionPerformed
        for(int i=0;i<4;i++){
            Domino domino;
            javax.swing.JLabel label=(javax.swing.JLabel)panels[i].getComponent(panels[i].getComponentCount()-1);
            domino=soloGame.getDomino(soloGame.getLine(i+1));
            if(soloGame.fitsOnDominoLine(domino)){
                label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            }
        }
    }//GEN-LAST:event_soloHintActionPerformed
    /**
    * Disposes the Solo frame and goes back to the first frame.
    * @param evt 
    */
    private void soloBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_soloBackMouseClicked
        soloFrame.dispose();
        domino=null;
        setVisible(true);
    }//GEN-LAST:event_soloBackMouseClicked
    /**
    * Starts a new round for the Hungarian or the Cardinal game on the Hungarian
    * frame.
    * @param evt 
    */
    private void hungarianStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hungarianStartButtonActionPerformed
        //JOptionPane.showMessageDialog(hungarianFrame,"Its Player"+hungarianGame.getCurrentPlayer()+"'s turn");
        if(locale.getLanguage().equals("el")){
            JOptionPane.showMessageDialog(hungarianFrame,"Νέος γύρος ξεκινάει");
        }
        else{
            JOptionPane.showMessageDialog(hungarianFrame,"New round starts");
        }
        updateHungarianGame(game);
        hungarianStartButton.setVisible(false);
        hungarianDominoLine.setVisible(true);
    }//GEN-LAST:event_hungarianStartButtonActionPerformed
    /**
    * Disposes the Hungarian frame and goes back to the first frame.
    * @param evt 
    */
    private void hungarianBackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hungarianBackButtonMouseClicked
        hungarianFrame.dispose();
        domino=null;
        setVisible(true);
    }//GEN-LAST:event_hungarianBackButtonMouseClicked
    /**
     * On a cardinal game takes a domino from the domino set
     * @param evt 
     */
    private void cardGetDominoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardGetDominoActionPerformed
        cardinalGame.getDomino();
        updateHungarianFrame(game);
        cardGetDomino.setVisible(false);
    }//GEN-LAST:event_cardGetDominoActionPerformed
    /**
     * Selects a domino from the line given.
     * @param numberOfLine the line from which the domino will be taken.
     */
    private void lineActionPerformed(int numberOfLine){
        line=soloGame.getLine(numberOfLine);
        if(!line.isEmpty()){
            domino=soloGame.getDomino(line);
            updateSoloFrame();
            updateDominoLine(soloGame);
        }
    }
    /**
     * Sets visible the Solo frame.
     */
    private void startSoloGame(){
        setVisible(false);
        soloFrame.setLocationRelativeTo(null);
        panels=new JPanel[4];
        panels[0]=queue1;
        panels[1]=queue2;
        panels[2]=queue3;
        panels[3]=queue4;
        soloHint.setVisible(false);
        line1.setVisible(false);
        line2.setVisible(false);
        line3.setVisible(false);
        line4.setVisible(false);
        soloStartButton.setVisible(true);
        soloGame=new Solo1();
        soloGame.setLines();
        updateSoloFrame();
        updateDominoLine(soloGame);
        soloFrame.setVisible(true);
    }
    /**
     * Sets visible the Hungarian frame, after the player selects the number
     * of players to play the game.
     * @param game Cardinal or Hungarian game.
     */
    private void startHungarianGame(HungarianMode game){
        hungPlayer3.setVisible(false);
        hungPlayer4.setVisible(false);
        Integer possibilities[]={2,3,4};
        String message;
        String numberOfPlayers;
        if(locale.getLanguage().equals("el")){
            message="Επέλεξε τον αριθμό παικτών";
            numberOfPlayers="Παίκτες";
        }
        else{
            message="Choose the number of players";
            numberOfPlayers="Players";
        }
        Integer players=(Integer) JOptionPane.showInputDialog(
                    this,
                    message,
                    numberOfPlayers,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    possibilities[0]);;
        if(players!=null){
            setVisible(false);
            if(game instanceof Cardinal){
                cardinalGame=new Cardinal(players);
                game=cardinalGame;
                this.game=game;
                dominoDeck.setVisible(true);
                labelDominoDeck.setVisible(true);
            }
            else{
                hungarianGame=new HungarianMode(players);
                game=hungarianGame;
                this.game=game;
            }
            panels=new JPanel[players];
            panels[0]=hungPlayer1;
            panels[1]=hungPlayer2;
            if(players==3){
                panels[2]=hungPlayer3;
                hungPlayer3.setVisible(true);
            }
            else if(players==4){
                panels[2]=hungPlayer3;
                panels[3]=hungPlayer4;
                hungPlayer3.setVisible(true);
                hungPlayer4.setVisible(true);
            }
            hungarianFrame.setLocationRelativeTo(null);
            startNewRound(game);
            hungarianFrame.setVisible(true);
        }
        else{
            setVisible(true);
        }
    }
    /**
     * Starts a new round for the Cardinal or the Hungarian game.
     * @param game Cardinal or Hungarian game.
     */
    private void startNewRound(HungarianMode game){
        hungarianStartButton.setVisible(true);
        hungarianDominoLine.setVisible(false);
        game.newRound();
        updateHungarianFrame(game);
    }
    /**
     * Tries to put the selected domino on the right of the domino line.
     * @param game Solo,Hungarian or Cardinal game
     */
    private void rightArrowMouseClicked(Game game) {                                      
        arrowMouseClicked("left",game);
    }
    /**
     * Tries to put the selected domino on the left of the domino line.
     * @param game Solo,Hungarian or Cardinal game
     */
    private void leftArrowMouseClicked(Game game) {                                      
        arrowMouseClicked("right",game);
    }
    /**
     * When it's player's turn. When he clicks a domino, this domino goes a
     * little higher than the others in order to show to the player which domino
     * he has selected.
     * @param domino
     * @param label 
     */
    private void dominoClicked(Domino domino,JLabel label){
        if(game.getCurrentPlayer()==1){
            hungarianFrame.revalidate();
            hungarianFrame.repaint();
            this.domino=domino;
            this.domino=domino;
            int x=label.getX();
            int y=label.getY();
            label.setLocation(x,y-10);
        }
    }
    /**
     * Tries to put a domino on the left or on the right of the domino line
     * depending on the direction given.
     * @param direction specifies where the domino will be put
     * @param game Solo game, Hungarian game or Cardinal game.
     */
    private void arrowMouseClicked(String direction,Game game){
        if(domino!=null){
            if(game instanceof Solo1){
                if(!line.isEmpty()){
                    domino=soloGame.getDomino(line);
                    if(soloGame.addDomino(line,direction)){
                        domino=null;
                    }
                    //domino=soloGame.getDomino(line);
                    updateSoloFrame();
                    updateDominoLine(soloGame);
                    if(!soloGame.solutionExists()){
                        if(soloGame.playerWon()){
                            if(locale.getLanguage().equals("el")){
                                gameIsOver(soloGame,"Κέρδισες",soloFrame);
                            }
                            else{
                                gameIsOver(soloGame,"won",soloFrame);
                            }
                        }
                        else{
                            if(locale.getLanguage().equals("el")){
                                gameIsOver(soloGame,"Έχασες",soloFrame);
                            }
                            else{
                                gameIsOver(soloGame,"lost",soloFrame);
                            }
                        }
                    }
                }
            }
            else if(game instanceof Cardinal){
                if(cardinalGame.getCurrentPlayer()==1){
                    if(cardinalGame.addDomino(domino,direction)){
                        domino=null;
                    }
                }
                else{
                    updateHungarianGame(cardinalGame);
                }
                if(!cardinalGame.playerCanPlay()){
                    if(!cardinalGame.playerHasDominos()){
                        updateHungarianGame(cardinalGame);
                    }
                    if(!cardinalGame.getDominos()){
                        updateHungarianGame(cardinalGame);
                    }
                    else{
                        cardGetDomino.setVisible(false);
                    }
                }
                updateHungarianFrame(cardinalGame);
                updateDominoLine(cardinalGame);
            }
            else if(game instanceof HungarianMode){
                if(hungarianGame.getCurrentPlayer()==1){
                    if(hungarianGame.addDomino(domino,direction)){
                        domino=null;
                    }
                }
                else{
                    updateHungarianGame(hungarianGame);
                }
                if(!hungarianGame.playerCanPlay()){
                    updateHungarianGame(hungarianGame);
                }
                updateHungarianFrame(hungarianGame);
                updateDominoLine(hungarianGame);
            }
        }
    }
    /**
     * This method pops a window when a game is over and asks the player if he 
     * wants to play again or not. If he presses yes a new game starts. If he
     * presses no he goes back to the first frame. If he presses cancel nothing
     * happens and he can decide what he will do.
     * @param game Solo game,Hungarian game or Cardinal game
     * @param wonOrLost it is needed for the Solo game 
     * @param frame Solo frame or Hungarian frame.
     */
    private void gameIsOver(Game game,String wonOrLost,JFrame frame){
        if(game instanceof Solo1){
            Object options[]=new Object[3];
            String message;
            String sentence;
            if(locale.getLanguage().equals("el")){
                options[0]="Ναι";
                options[1]="Όχι, πάνε πίσω στο μενού";
                options[2]="Ακύρωση";
                message=wonOrLost+".\nΘες να παίξεις ξανά; ";
                sentence="Το παιχνίδι τελείωσε";
            }
            else{
                options[0]="Yes";
                options[1]="No, go back to menu";
                options[2]="Cancel";
                message="You "+wonOrLost+ ", \ndo you want to play again?";
                sentence="Game is over";
            }
            int option=JOptionPane.showOptionDialog(
                    frame,
                    message, 
                    sentence, 
                    YES_NO_CANCEL_OPTION,
                    PLAIN_MESSAGE,
                    null,
                    options,
                    options[0]);
            if(option==YES_OPTION){
                frame.dispose();
                startSoloGame();
            }
            if(option==NO_OPTION){
                frame.dispose();
                setVisible(true);
            }
        }
        else if(game instanceof HungarianMode){
            Object options[]=new Object[3];
            String message;
            String sentence;
            if(locale.getLanguage().equals("el")){
                options[0]="Ναι";
                options[1]="Όχι, πάνε πίσω στο μενού";
                options[2]="Ακύρωση";
                message="Ο Παίκτης"+this.game.getCurrentPlayer()+" κέρδισε το παιχνίδι";
                sentence="Το παιχνίδι τελείωσε";
            }
            else{
                options[0]="Yes";
                options[1]="No, go back to menu";
                options[2]="Cancel";
                message="Player"+this.game.getCurrentPlayer()+" won the game";
                sentence="Game is over";
            }
            int option=JOptionPane.showOptionDialog(
                    frame,
                    message, 
                    sentence, 
                    YES_NO_CANCEL_OPTION,
                    PLAIN_MESSAGE,
                    null,
                    options,
                    options[0]);
            if(option==YES_OPTION){
                frame.dispose();
                startHungarianGame(this.game);
            }
            if(option==NO_OPTION){
                frame.dispose();
                setVisible(true);
            }
        }
    }
    /**
     * Updates the Solo frame
     */
    private void updateSoloFrame(){
        //DominoSet dominoSet=soloGame.getDominoSet();
        //ArrayList<javax.swing.JLabel> labels=new ArrayList<>();
        for(int i=0;i<4;i++){
            panels[i].removeAll();
            ArrayList<Domino> line=soloGame.getLine(i+1);
            for(int j=0;j<line.size();j++){
                Domino domino=line.get(j);
                JLabel label=new JLabel();
                label.setIcon(new ImageIcon("pictures/dominosVertical/domino"+domino.getLeft()+domino.getRight()+".png"));
                panels[i].add(label);
            }
            if(domino!=null){
                bigDomino.setIcon(new ImageIcon("pictures/bigDominos/domino"+domino.getLeft()+domino.getRight()+".png"));
            }
            else{
                bigDomino.setIcon(null);
            }
            panels[i].revalidate();
            panels[i].repaint();
        }
        soloFrame.revalidate();
        soloFrame.repaint();
    }
    /**
     * Updates the Hungarian frame.
     * @param game Hungarian or Cardinal game.
     */
    private void updateHungarianFrame(HungarianMode game){
        if(game instanceof Cardinal){
            Integer size=cardinalGame.getSetSize();
            dominoDeck.setText(size.toString());
        }
        for(int i=0;i<panels.length;i++){
            panels[i].removeAll();
            ArrayList<Domino> dominosOfPlayer=game.getDominosOfPlayer(i+1);
            for(int j=0;j<dominosOfPlayer.size();j++){
                Domino domino=dominosOfPlayer.get(j);
                JLabel label=new JLabel();
                if(i==0){
                    label.setIcon(new ImageIcon("pictures/dominosVertical/domino"+domino.getLeft()+domino.getRight()+".png"));
                    label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    label.addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent evt) {
                            dominoClicked(domino,label);
                        }
                    });
                }
                else{
                    label.setIcon(new ImageIcon("pictures/dominosVertical/dominoback.png"));
                }
                //label.setIcon(new ImageIcon("pictures/dominosVertical/domino00.png"));
                panels[i].add(label);
            }
            //panels[i].revalidate();
            //panels[i].repaint();
        }
        updateDominoLine(game);
        hungarianFrame.revalidate();
        hungarianFrame.repaint();
    }
    /**
     * Checks if the game is finished. If not, it shows which player's turn it
     * is
     * @param game Hungarian or Cardinal game.
     */
    private void updateHungarianGame(HungarianMode game){
        updateHungarianFrame(game);
        if(!game.solutionExists()){
            showPointsOfPlayer(game);
            if(!game.gameIsOver()){
                startNewRound(game);
            }
            else{
                gameIsOver(game,"",hungarianFrame);
                dominoDeck.setVisible(false);
                labelDominoDeck.setVisible(false);
            }
        }
        else{
            if(game.getCurrentPlayer()!=1){
                if(locale.getLanguage().equals("el")){
                    JOptionPane.showMessageDialog(hungarianFrame,"Είναι η σειρά"
                                      +" του Παίκτη"+game.getCurrentPlayer());
                }
                else{
                    JOptionPane.showMessageDialog(hungarianFrame,"Its Player"
                                        +game.getCurrentPlayer()+"'s turn");
                }
                Timer myTimer=new Timer();
                TimerTask task=new TimerTask() {
                    public void run() {
                        game.bot();
                        updateHungarianGame(game);
                        myTimer.cancel();
                    }
                };
                myTimer.schedule(task, 100);
            }
            else{
                if(game instanceof Cardinal){
                    if(cardinalGame.getSetSize()>2){
                        cardGetDomino.setVisible(true);
                    }
                }
                if(locale.getLanguage().equals("el")){
                    JOptionPane.showMessageDialog(hungarianFrame,"Είναι η σειρά σου");
                }
                else{
                    JOptionPane.showMessageDialog(hungarianFrame,"Its your turn");
                }
                hungarianFrame.revalidate();
                hungarianFrame.repaint();
            }
        }
    }
    /**
     * Updates the domino line of every frame.
     * @param game Solo,Hungarian or Cardinal game.
     */
    private void updateDominoLine(Game game){
        ArrayList<Domino> line=game.getDominoLine();
        JPanel panel;
        if(game instanceof Solo1){
            panel=soloDominoLine;
        }
        else{
            panel=hungarianDominoLine;
        }
        panel.removeAll();
        javax.swing.JLabel rightArrow=new javax.swing.JLabel();
        rightArrow.setIcon(new javax.swing.ImageIcon("pictures/dominosHorizontal/rightArrow.png"));
        rightArrow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rightArrow.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                rightArrowMouseClicked(game);
            }
        });
        panel.add(rightArrow);
        for(int i=0;i<line.size();i++){
            Domino domino=line.get(i);
            javax.swing.JLabel label=new javax.swing.JLabel();
            if(game instanceof Cardinal){
                label.setIcon(new ImageIcon("pictures/dominosCardinal/domino"+domino.getLeft()+domino.getRight()+".png"));
            }
            else{
                label.setIcon(new ImageIcon("pictures/dominosHorizontal/domino"+domino.getLeft()+domino.getRight()+".png"));
            }
            panel.add(label);
        }
        javax.swing.JLabel leftArrow = new javax.swing.JLabel();
        leftArrow.setIcon(new ImageIcon("pictures/dominosHorizontal/leftArrow.png"));
        leftArrow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        leftArrow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftArrowMouseClicked(game);
            }
        });
        panel.add(leftArrow);
        panel.revalidate();
        panel.repaint();
    }
    /**
     * Shows the players' points of the Hungarian or Cardinal game.
     * @param game Hungarian or Cardinal game.
     */
    private void showPointsOfPlayer(HungarianMode game){
        if(locale.getLanguage().equals("el")){
            JOptionPane.showMessageDialog(hungarianFrame,"Ο Παίκτης"+game.playerWhoWonTheRound()+" κέρδισε τον γύρο");
        }
        else{
            JOptionPane.showMessageDialog(hungarianFrame,"Player"+game.playerWhoWonTheRound()+"won the round");
        }
        if(game.getPlayers()==2){
            if(locale.getLanguage().equals("el")){
                JOptionPane.showMessageDialog(hungarianFrame,"Ο Παίκτης1 έχει: "+game.pointsOfPlayer(1)+"πόντους\n"
                                            + "Ο Παίκτης2 έχει: "+game.pointsOfPlayer(2)+"πόντους");
            }
            else{
                JOptionPane.showMessageDialog(hungarianFrame,"Player1 has: "+game.pointsOfPlayer(1)+"points\n"
                                            + "Player2 has: "+game.pointsOfPlayer(2)+"points");
            }
        }
        else if(game.getPlayers()==3){
            if(locale.getLanguage().equals("el")){
                JOptionPane.showMessageDialog(hungarianFrame,"Ο Παίκτης1 έχει: "+game.pointsOfPlayer(1)+"πόντους\n"
                                            + "Ο Παίκτης2 έχει: "+game.pointsOfPlayer(2)+"πόντους\n"
                                            + "Ο Παίκτης3 έχει: "+game.pointsOfPlayer(3)+"πόντους");
            }
            else{
                JOptionPane.showMessageDialog(hungarianFrame,"Player1 has: "+game.pointsOfPlayer(1)+"points\n"
                                            + "Player2 has: "+game.pointsOfPlayer(2)+"points\n"
                                            + "Player3 has: "+game.pointsOfPlayer(3)+"points");
            }
        }
        else{
            if(locale.getLanguage().equals("el")){
                JOptionPane.showMessageDialog(hungarianFrame,"Ο Παίκτης1 έχει: "+game.pointsOfPlayer(1)+"πόντους\n"
                                            + "Ο Παίκτης2 έχει: "+game.pointsOfPlayer(2)+"πόντους\n"
                                            + "Ο Παίκτης3 έχει: "+game.pointsOfPlayer(3)+"πόντους\n"
                                            + "Ο Παίκτης4 έχει: "+game.pointsOfPlayer(4)+"πόντους");
            } 
            else{
                JOptionPane.showMessageDialog(hungarianFrame,"Player1 has: "+game.pointsOfPlayer(1)+"points\n"
                                            + "Player2 has: "+game.pointsOfPlayer(2)+"points\n"
                                            + "Player3 has: "+game.pointsOfPlayer(3)+"points\n"
                                            + "Player4 has: "+game.pointsOfPlayer(4)+"points");
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Gui gui=new Gui();
                gui.setLocationRelativeTo(null);
                gui.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bigDomino;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cardGetDomino;
    private javax.swing.JButton cardinalButton;
    private javax.swing.JLabel dominoDeck;
    private javax.swing.JButton exit;
    private javax.swing.JLabel hungBackround;
    private javax.swing.JPanel hungPlayer1;
    private javax.swing.JPanel hungPlayer2;
    private javax.swing.JPanel hungPlayer3;
    private javax.swing.JPanel hungPlayer4;
    private javax.swing.JLabel hungarianBackButton;
    private javax.swing.JButton hungarianButton;
    private javax.swing.JPanel hungarianDominoLine;
    private javax.swing.JFrame hungarianFrame;
    private javax.swing.JButton hungarianStartButton;
    private javax.swing.JLabel icon;
    private javax.swing.JLabel infoCard;
    private javax.swing.JLabel infoHung;
    private javax.swing.JLabel infoSolo;
    private javax.swing.JLabel labelDominoDeck;
    private javax.swing.JButton line1;
    private javax.swing.JButton line2;
    private javax.swing.JButton line3;
    private javax.swing.JButton line4;
    private javax.swing.JPanel linePanel;
    private javax.swing.JLabel message;
    private javax.swing.JPanel queue1;
    private javax.swing.JPanel queue2;
    private javax.swing.JPanel queue3;
    private javax.swing.JPanel queue4;
    private javax.swing.JLabel soloBack;
    private javax.swing.JButton soloButton;
    private javax.swing.JLabel soloChosenDomino;
    private javax.swing.JPanel soloDominoDisplay;
    private javax.swing.JPanel soloDominoLine;
    private javax.swing.JFrame soloFrame;
    private javax.swing.JButton soloHint;
    private javax.swing.JLabel soloIcon;
    private javax.swing.JLabel soloLineLabel;
    private javax.swing.JButton soloStartButton;
    private javax.swing.JPanel whitePanel;
    // End of variables declaration//GEN-END:variables
    Locale locale;
    private Solo1 soloGame;
    private HungarianMode hungarianGame;
    private ArrayList<Domino> line;
    private Domino domino;
    private HungarianMode game;
    private Cardinal cardinalGame;
    javax.swing.JPanel panels[];
}
